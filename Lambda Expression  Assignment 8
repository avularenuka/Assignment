
1.
package practice;

/*
FunctionalInterface
 */
    interface Arithmetic {
        int operation(int a, int b);
    }

    public class FunctionalInterface {
        public static void main(String[] args) {

            // Addition using Lambda expression
            Arithmetic addition = (int a, int b) -> (a + b);
            // Arithmetic addition = (int a, int b) -> {return a + b;};

            System.out.println("Addition = " + addition.operation(5, 6));

            // Subtraction using Lambda expression
            Arithmetic subtraction = (int a, int b) -> (a - b);
            // Arithmetic addition = (int a, int b) -> {return a - b;};

            System.out.println("Subtraction = " + subtraction.operation(5, 3));

            // Multiplication using Lambda expression
            Arithmetic multiplication = (int a, int b) -> (a * b);
            // Arithmetic addition = (int a, int b) -> {return a * b;};

            System.out.println("Multiplication = " + multiplication.operation(4, 6));

            // Division using Lambda expression
            Arithmetic division = (int a, int b) -> (a / b);
            // Arithmetic addition = (int a, int b) -> {return a * b;};

            System.out.println("Division = " + division.operation(12, 6));

        }
    }
    
    output:
    Addition = 11
    Subtraction = 2
    Multiplication = 24
    Division = 2

    
  2.
 package practice;
interface price {
    public String price();
}

public class FunctionalInterface {
    public static void main(String[] args) {

        Integer i = 200000;
        price p = () -> {
            if (i > 10000) {
                return "Accepted!";
            } else
                return "Not Accepted!";

        };
        System.out.println(p.price());
    }


}

3.
package lambdajava8;

import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.function.Supplier;

class Product 
{
private double price = 0.0;

public void setPrice(double price) 
  {
this.price = price;
  }

public void printPrice() {
System.out.println("This is Consumer functional interface: "+price);
  }
}

public class third
{
public static void main(String[] args) 
  {
	//consumer functional interface
    Consumer<Product>updatePrice = p ->p.setPrice(9.7);
    Product p = new Product();
updatePrice.accept(p);
p.printPrice();

//Predicate functional interface
    Predicate<String>isALongWord = t ->t.length() > 10;
    String s = "successfully";
boolean result = isALongWord.test(s);
System.out.println("This is predicate functional interface: "+s);

//Function functional interface
    Function<Integer, Double>half = a ->a / 2.0;
System.out.println("This is Function functional interface: "+half.apply(10));

//Supplier functional interface
    Supplier<Double>randomValue = () ->Math.random();
System.out.println("This is supplier functional interface: "+randomValue.get());

  }
}

5.
import java.util.List;
import java.util.function.Consumer;

public class word {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
			var word = List.of("Apple", "Ball", "Cat", "Dog", "Egg");
			word.forEach(new Consumer<String>()
					{
public void accept (String s)
{
	StringBuilder s1 = new StringBuilder();
	for (String st : s.split(" "))
	{
		s1.append(st.charAt(0));
	}
	System.out.println(s1.toString());
}
});
}}

output:
A
B
C
D
E




7.
package practice;

import java.util.HashMap;
import java.util.Map;
import java.util.stream.Collectors;

public class MapToString {
    public static void main(String[] cmd_lineParams) {
        Map<String, String> map = new HashMap<>(5);
        map.put("name1", "value1");
        map.put("name2", "value2");
        map.put("name3", "value3");
        map.put("name4", "value4");
        map.put("name5", "value5");
        String s = map.entrySet().stream().map((entry) ->
                        "" + entry.getKey() + " \"" + entry.getValue().replaceAll("\"", "\\\\\"") + "\"")
                .collect(Collectors.joining(" "));
        System.out.println(s);

    }
}

output:
name5 "value5" name4 "value4" name3 "value3" name2 "value2" name1 "value1"



8.
import java.util.ArrayList;
import java.util.List;

public class Threadlist {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		List<Integer> num=new ArrayList<Integer>(){{
            add(11);
            add(55);
            add(37);
            add(95);
            add(99);
        }};
        
        Thread mylambda = new Thread(()->System.out.println(num));
        mylambda.run();
	}
}
output:
A
B
C
D
E
