1.
 import java.lang.annotation.*;  
import java.lang.reflect.*;  

@Retention (RetentionPolicy.RUNTIME)  
@Target (ElementType.METHOD)  
@interface Test
{  
	String str();  
}  

class first {
	@Test(str="Test Annotation")  
	public void testCase() {}  

}
[11:09 pm, 18/01/2022] +91 96408 73034: mport java.lang.reflect.Method;

public class test1 {

	public static void main(String[] args) throws Exception {
		// TODO Auto-generated method stub

		first f=new first();  
		Method m = f.getClass().getMethod("testCase");  
	
		Test ts = m.getAnnotation(Test.class);  
		System.out.println(ts.str());  

	}

}

2
import java.lang.reflect.Method;

public class author1 {

	public static void main(String[] args) throws NoSuchMethodException, SecurityException {
		// TODO Auto-generated method stub
		author a = new author(); 
		a.display();  
		   Method m = a.getClass().getMethod("display"); 
		info i = m.getAnnotation(info.class);
		
		System.out.println("Author ID : " +i.id());
		System.out.println("Author Name: " +i.name());
		System.out.println("Superviser Name: " +i.superviser());
		System.out.println("Date: " +i.date());
		System.out.println("Time: " +i.time());
		System.out.println("Version: " +i.version());

	}

}
3.
import java.lang.reflect.Method;
import java.lang.annotation.ElementType;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;

@Target(value = ElementType.METHOD)
@Retention(value = RetentionPolicy.RUNTIME)
@interface Execute 
{
	int Sequence();
}

class Anno 
{
	@Execute(Sequence=2)
    public void method1() 
    {
        System.out.println("-----Method 1-----");
    }

    @Execute(Sequence=1)
    public void method2() 
    {
        System.out.println("-----Method 2-----");
    }
    
    @Execute(Sequence=3)
    public void method3() 
    {
        System.out.println("-----Method 3-----");
    }

}

public class AnnotationExecute {
    public static void main(String[] args) {

    	Anno ta = new Anno();
        Method[] methods = ta.getClass().getMethods();

        for (Method method : methods) {
            Execute exe = method.getAnnotation(Execute.class);
            if (exe != null) {
                try {
                    method.invoke(ta);
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        }
    }
}
