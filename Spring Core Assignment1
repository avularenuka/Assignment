Spring Core Assignment


1.	

For Setter Injection Main Class SpringQuestion1Test
package Spring_Core;

import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

public class SpringQuestion1
{
	@SuppressWarnings("unused")
	private static ApplicationContext context;

	public static void main(String[] args)
	{
			@SuppressWarnings("resource")
			ApplicationContext context = new ClassPathXmlApplicationContext("file:src/main/resources/Addressbean.xml");
			
			Customer customer = (Customer)context.getBean("Customer");
			System.out.println(customer);
			
	}
	
}

Address.java
package Spring_Core;

public class Address
{
	private String city, street, state, country;
	private int zip;
	
	public String getCity()
	{
		return city;
	}
	
	public void setCity(String city)
	{
		this.city = city;
	}
	
	public String getStreet()
	{
		return street;
	}
	
	public void setStreet(String street)
	{
		this.street = street;
	}
	
	public String getState()
	{
		return state;
	}
	
	public void setState(String state)
	{
		this.state = state;
	}
	
	public String getCountry()
	{
		return country;
	}
	
	public void setCountry(String country)
	{
		this.country = country;
	}
	
	public int getZip()
	{
		return zip;
	}
	
	public void setZip(int zip)
	{
		this.zip = zip;
	}
	
}

AddressBean.xml
<beans xmlns = "http://www.springframework.org/schema/beans"
		xmlns:xsi = "http://www.w3.org/2001/XMLSchema-instance"
		xsi:schemaLocation="http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans-3.0.xsd">
		
		<bean id = "Address" class = "Spring_Core.Address">
		<property name = "zip" value = "221"/>
		<property name = "city" value = "London"/>
		<property name = "street" value = "Baker Street"/>
		<property name = "state" value = "World"/>
		<property name = "country" value = "England"/>
		
		</bean>
		
		<bean id = "Customer" class = "Spring_Core.Customer">
		<property name = "customerId" value = "123"/>
		<property name = "customercontact" value = "123456"/>
		<property name = "customerAddress" ref = "Address"/>
		<property name = "customerName" value = "Sherlock Holmes"/>
		</bean>
	
		</beans>

Customer.java
package Spring_Core;

public class Customer
{
	private int customerId;
	private int customercontact;
	private String customerName;
	private Address customerAddress;

	public int getCustomerId()
	{
		return customerId;
	}
	
	public void setCustomerId(int customerId)
	{
		this.customerId = customerId;
	}
	
	public int getCustomercontact()
	{
		return customercontact;
	}
	
	public void setCustomercontact(int customercontact)
	{
		this.customercontact = customercontact;
	}
	
	public Address getCustomerAddress()
	{
		return customerAddress;
	}
	
	public void setCustomerAddress(Address customerAddress)
	{
		this.customerAddress = customerAddress;
	}
	
	public String getCustomerName()
	{
		return customerName;
	}
	
	public void setCustomerName(String customerName)
	{
		this.customerName = customerName;
	}

	public String toString()
	{
		return "Customer Id: "+getCustomerId()+ ", Customer Contact: "+getCustomercontact()+ ", Customer Address: {City: "+getCustomerAddress().getCity()+", Street: "+getCustomerAddress().getStreet()+", State: "+getCustomerAddress().getState()+", Country: "+getCustomerAddress().getCountry()+", Zip: "+getCustomerAddress().getZip()+"}, Customer Name: "+getCustomerName();
	}
	
}

For Constructor Main Class SpringQuestion1Test
package Spring_Core;

import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

public class SpringQuestion1
{
	@SuppressWarnings("unused")
	private static ApplicationContext context;

	public static void main(String[] args)
	{			
			@SuppressWarnings("resource")
			ApplicationContext context1 = new ClassPathXmlApplicationContext("file:src/main/resources/Customer.xml");
			
			Customer customer2 = (Customer)context1.getBean("Customer1");
			System.out.println(customer2);
			
	}
	
}

For Constructor Address.java
package Spring_Core;

public class Address
{
	private String city, street, state, country;
	private int zip;
	
	public String getCity()
	{
		return city;
	}
	
	public void setCity(String city)
	{
		this.city = city;
	}
	
	public String getStreet()
	{
		return street;
	}
	
	public void setStreet(String street)
	{
		this.street = street;
	}
	
	public String getState()
	{
		return state;
	}
	
	public void setState(String state)
	{
		this.state = state;
	}
	
	public String getCountry()
	{
		return country;
	}
	
	public void setCountry(String country)
	{
		this.country = country;
	}
	
	public int getZip()
	{
		return zip;
	}
	
	public void setZip(int zip)
	{
		this.zip = zip;
	}

	public Address(String city, String street, String state, String country, int zip) {
		super();
		this.city = city;
		this.street = street;
		this.state = state;
		this.country = country;
		this.zip = zip;
	}
	
}


For Constructor Customer.java

package Spring_Core;

public class Customer
{
	private int customerId;
	private int customercontact;
	private String customerName;
	private Address customerAddress;
	
	public Customer(int customerId, int customercontact, String customerName, Address customerAddress)
	{
		
		this.customerId = customerId;
		this.customercontact = customercontact;
		this.customerName = customerName;
		this.customerAddress = customerAddress;
	}

	public int getCustomerId()
	{
		return customerId;
	}
	
	public void setCustomerId(int customerId)
	{
		this.customerId = customerId;
	}
	
	public int getCustomercontact()
	{
		return customercontact;
	}
	
	public void setCustomercontact(int customercontact)
	{
		this.customercontact = customercontact;
	}
	
	public Address getCustomerAddress()
	{
		return customerAddress;
	}
	
	public void setCustomerAddress(Address customerAddress)
	{
		this.customerAddress = customerAddress;
	}
	
	public String getCustomerName()
	{
		return customerName;
	}
	
	public void setCustomerName(String customerName)
	{
		this.customerName = customerName;
	}

	public String toString()
	{
		return "Customer Id: "+getCustomerId()+ ", Customer Contact: "+getCustomercontact()+ ", Customer Address: {City: "+getCustomerAddress().getCity()+", Street: "+getCustomerAddress().getStreet()+", State: "+getCustomerAddress().getState()+", Country: "+getCustomerAddress().getCountry()+", Zip: "+getCustomerAddress().getZip()+"}, Customer Name: "+getCustomerName();
	}
	
}


For Constructor Customer.xml

<beans xmlns = "http://www.springframework.org/schema/beans"
		xmlns:xsi = "http://www.w3.org/2001/XMLSchema-instance"
		xsi:schemaLocation="http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans-3.0.xsd">
		
		<bean id = "Address" class = "Spring_Core.Address">
		
		<constructor-arg index = "0" name = "city" type = "java.lang.String" value = "London"/>
		<constructor-arg index = "1" name = "street" type = "java.lang.String" value = "Baker Street"/>
		<constructor-arg index = "2" name = "state" type = "java.lang.String" value = "World"/>
		<constructor-arg index = "3" name = "country" type = "java.lang.String" value = "England"/>
		<constructor-arg index = "4" name = "zip" type = "int" value = "221"/>
		
		</bean>
		
		<bean id = "Customer1" class = "Spring_Core.Customer">
		<constructor-arg index = "0" name = "customerId" type = "int" value = "123"/>
		<constructor-arg index = "1" name = "customercontact" type = "int" value = "123456"/>
		<constructor-arg index = "2" name = "customerName" type = "java.lang.String" value = "Sherlock Holmes"/>
		<constructor-arg index = "3" name = "customerAddress" ref = "Address"/>		
		</bean>
		</beans>
		

2.

Main Class Question2.java

package Spring_Core;

import static org.junit.jupiter.api.Assertions.*;
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;


import org.junit.jupiter.api.Test;

class Question2
{

	@SuppressWarnings("unused")
	private static ApplicationContext context;

	public static void main(String[] args)
	{
		 @SuppressWarnings("resource")
		ApplicationContext context = new ClassPathXmlApplicationContext("Coll.xml");
         
         List list = (List) context.getBean("Collections");
          
         System.out.println("List: " + list.getList());
         
	}

}

Question2.java

package Spring_Core;

public class Question
{
	private int questionId;
	private String question, answers;
	public void setQuestionId(int questionId) {
		this.questionId = questionId;
	}
	public void setQuestion(String question) {
		this.question = question;
	}
	public void setAnswers(String answers) {
		this.answers = answers;
	}
	
	public String toString()
	{
		return "Question ID: "+questionId+ ", Questions: "+question+ ", Answers: "+answers+"\n";
	}
	
}

List.java

package Spring_Core;

import java.util.ArrayList;
import java.util.Map;
import java.util.Set;

public class List
{
	private ArrayList<Object> list;
	 
    private Set<Object> set;
     
    private Map<Object, Object> map;

	public ArrayList<Object> getList() {
		return list;
	}

	public void setList(ArrayList<Object> list) {
		this.list = list;
	}

	public Set<Object> getSet() {
		return set;
	}

	public void setSet(Set<Object> set) {
		this.set = set;
	}

	public Map<Object, Object> getMap() {
		return map;
	}

	public void setMap(Map<Object, Object> map) {
		this.map = map;
	}
}


Coll.xml

<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
    xmlns:aop="http://www.springframework.org/schema/aop" xmlns:context="http://www.springframework.org/schema/context"
    xmlns:jee="http://www.springframework.org/schema/jee" xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:task="http://www.springframework.org/schema/task" xsi:schemaLocation="http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.2.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.2.xsd">
 
    <bean id="Collections" class="Spring_Core.List">
        <property name="list">
            <list>
                <ref bean="answers" />
                <ref bean="answers1" />
                <ref bean="answers2" />
            </list>
        </property>
    </bean>
     
    <bean id="answers" class="Spring_Core.Question">
        <property name="answers" value=”Teja"/>
        <property name = "question" value = "What's your name?"/>
        <property name = "questionId" value = "222"/>
	</bean>
	
	<bean id="answers1" class="Spring_Core.Question">
		<property name="answers" value="Ritu"/>
        <property name = "question" value = "What's your name?"/>
        <property name = "questionId" value = "444"/>
	</bean>
	
	<bean id="answers2" class="Spring_Core.Question">
	<property name="answers" value="Manu"/>
        <property name = "question" value = "What's your name?"/>
        <property name = "questionId" value = "234"/>
	</bean>
        
    </beans>


Main Class Question2.java

package Spring_Core;

import static org.junit.jupiter.api.Assertions.*;
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;


import org.junit.jupiter.api.Test;

class Question2
{

	@SuppressWarnings("unused")
	private static ApplicationContext context;

	public static void main(String[] args)
	{
		 @SuppressWarnings("resource")
		ApplicationContext context = new ClassPathXmlApplicationContext("Coll.xml");
         
         List set = (List) context.getBean("Collections");
          
         System.out.println("Set : " + set.getSet());
         
	}

}


Coll.xml


<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
    xmlns:aop="http://www.springframework.org/schema/aop" xmlns:context="http://www.springframework.org/schema/context"
    xmlns:jee="http://www.springframework.org/schema/jee" xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:task="http://www.springframework.org/schema/task" xsi:schemaLocation="http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.2.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.2.xsd">
 
    <bean id="Collections" class="Spring_Core.List">
        <property name="set">
            <set>
                <ref bean="answers" />
                <ref bean="answers1" />
                <ref bean="answers2" />
            </set>
        </property>
    </bean>
     
    <bean id="answers" class="Spring_Core.Question">
        <property name="answers" value="Renu"/>
        <property name = "question" value = "What's your name?"/>
        <property name = "questionId" value = "222"/>
	</bean>
	
	<bean id="answers1" class="Spring_Core.Question">
		<property name="answers" value="Rama"/>
        <property name = "question" value = "What's your name?"/>
        <property name = "questionId" value = "444"/>
	</bean>
	
	<bean id="answers2" class="Spring_Core.Question">
	<property name="answers" value="Mani"/>
        <property name = "question" value = "What's your name?"/>
        <property name = "questionId" value = "234"/>
	</bean>
        
    </beans>


Main Class Question2.java

package Spring_Core;

import static org.junit.jupiter.api.Assertions.*;
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;


import org.junit.jupiter.api.Test;

class Question2
{

	@SuppressWarnings("unused")
	private static ApplicationContext context;

	public static void main(String[] args)
	{
		 @SuppressWarnings("resource")
		ApplicationContext context = new ClassPathXmlApplicationContext("Coll.xml");
         
         List map = (List) context.getBean("Collections");
          
         System.out.println("Map : " + map.getMap());
         
	}

}


Coll.xml


<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
    xmlns:aop="http://www.springframework.org/schema/aop" xmlns:context="http://www.springframework.org/schema/context"
    xmlns:jee="http://www.springframework.org/schema/jee" xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:task="http://www.springframework.org/schema/task" xsi:schemaLocation="http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.2.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.2.xsd">
 
    <bean id="Collections" class="Spring_Core.List">
        <property name="map">
            <map>
				<entry key="1" value-ref="answers" />
				<entry key="2" value-ref="answers1" />
                <entry key="3" value-ref="answers2" />
            </map>
        </property>
    </bean>
     
    <bean id="answers" class="Spring_Core.Question">
        <property name="answers" value="Renu"/>
        <property name = "question" value = "What's your name?"/>
        <property name = "questionId" value = "123"/>
	</bean>
	
	<bean id="answers1" class="Spring_Core.Question">
		<property name="answers" value="Rama"/>
        <property name = "question" value = "What's your name?"/>
        <property name = "questionId" value = "456"/>
	</bean>
	
	<bean id="answers2" class="Spring_Core.Question">
	<property name="answers" value="Mani"/>
        <property name = "question" value = "What's your name?"/>
        <property name = "questionId" value = "789"/>
	</bean>
        
    </beans>


7.
Spring core Question 7: 
Test.java
package com.maven7;

import org.springframework.expression.Expression;
import org.springframework.expression.ExpressionParser;
import org.springframework.expression.spel.standard.SpelExpressionParser;

public class Test {  
	public static void main(String[] args) {  
		
		
	
/*
ExpressionParser parser = new SpelExpressionParser();
Expression exp = parser.parseExpression("'Hello Maven'");
String message =  (String)exp.getValue();
System.out.println(message);
*/		
		
/*		
ExpressionParser parser = new SpelExpressionParser();
Expression exp = parser.parseExpression("'Welcome     To'.concat('SpringExpression')");                
String message = (String) exp.getValue(); System.out.println(message);
*/

/*		
ExpressionParser parser = new SpelExpressionParser();
Expression exp = parser.parseExpression("'Hello Abhi'.bytes"); 
byte[] bytes = (byte[]) exp.getValue();
for(int i=0;i<bytes.length;i++) {
System.out.print(bytes[i]+" "); 
}
*/

/*		
ExpressionParser parser = new SpelExpressionParser();
Expression exp =
     parser.parseExpression("new String('hello    world').toUpperCase()");
String message = exp.getValue(String.class); System.out.println(message);
*/		
		 
ExpressionParser parser = new SpelExpressionParser();
Expression exp = parser.parseExpression("'Hello Abhi'.bytes.length");  
int length = (Integer) exp.getValue();  
System.out.println(length);  
		 
}  
}  




Pom.xml
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>com.maven7</groupId>
  <artifactId>SPELexpression</artifactId>
  <version>0.0.1-SNAPSHOT</version>
<dependencies>

<!-- https://mvnrepository.com/artifact/org.springframework/spring-core -->
	<dependency>
 	   <groupId>org.springframework</groupId>
   	   <artifactId>spring-core</artifactId>
       <version>5.3.15</version>
	</dependency>

<!-- https://mvnrepository.com/artifact/org.springframework/spring-expression -->
 	<dependency>
    	<groupId>org.springframework</groupId>
    	<artifactId>spring-expression</artifactId>
    	<version>5.3.15</version>
 	</dependency>
</dependencies>
</project>



8. Write a java program to demonstrate  InitializingBean and DisponsableBean.
TRY different Ways:
(using init-method and Destroy method xml config file )
(Use @PostConstruct and @preDestroy)

1 Way:
ANS: 
 Class 1:

package QuestionEight;

import org.springframework.beans.factory.DisposableBean;
import org.springframework.beans.factory.InitializingBean;

public class CustomerService implements InitializingBean, DisposableBean {
	private String msg;

	public String getMsg() {
		return msg;
	}

	public void setMsg(String msg) {
		this.msg = msg;
	}

	public void destroy() throws Exception {

		// TODO Auto-generated method stub
		System.out.println("Spring Container is destroy! Customer clean up");
	}

	public void afterPropertiesSet() throws Exception {
		// TODO Auto-generated method stub
		System.out.println("Init method after properties are set : " + msg);
	}}
Class 2:
package QuestionEight;

import org.springframework.context.ConfigurableApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

public class Snippet {
	public static void main(String[] args) {
		ConfigurableApplicationContext context = new ClassPathXmlApplicationContext(
				new String[] { "SpringCustomer.xml" });

		CustomerService cust = (CustomerService) context.getBean("customerService");

		System.out.println(cust);

		context.close();
	}
}


XML FILE
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans-2.5.xsd">

       <bean id="customerService" class="QuestionEight.CustomerService">
		<property name="msg" value="i'm property message" />
       </bean>
		
</beans>

OUTPUT:
Init method after properties are set : i'm property message
Spring Container is destroy! Customer clean up




 2nd Way: 
Class 1: 

package EightB;

import javax.annotation.PostConstruct;
import javax.annotation.PreDestroy;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

@Component
public class MyBean {

	public MyBean() {
		System.out.println("MyBean instance created");
	}

	@PostConstruct
	private void init() {
		System.out.println("Verifying Resources");
	}

	@PreDestroy
	private void shutdown() {
		System.out.println("Shutdown All Resources");
	}

	public void close() {
		System.out.println("Closing All Resources");
	}
}

Class 2:
package EightB;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Scope;

@Configuration
public class MyConfiguration {

	@Bean
	@Scope(value = "singleton")
	public MyBean myBean() {
		return new MyBean();
	}

}

Class 3:
package EightB;

import org.springframework.context.annotation.AnnotationConfigApplicationContext;

public class SpringApp {

	public static void main(String[] args) {
		AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext();
		ctx.register(MyConfiguration.class);
		ctx.refresh();

		MyBean mb1 = ctx.getBean(MyBean.class);
		System.out.println(mb1.hashCode());

		MyBean mb2 = ctx.getBean(MyBean.class);
		System.out.println(mb2.hashCode());

		ctx.close();
	}

}

OUTPUT:
MyBean instance created
Verifying Resources
2145970759
2145970759
Shutdown All Resources
Closing All Resources

9.  Write a Java program to demonstrate complete Bean Life cycle .

ANS: 
public class HelloWorld {
	 public void init() throws Exception
	    {
	        System.out.println(
	            "Bean HelloWorld has been "
	            + "instantiated and I'm "
	            + "the init() method");
	    }
	 
	    // This method executes
	    // when the spring container
	    // is closed
	    public void destroy() throws Exception
	    {
	        System.out.println(
	            "Container has been closed "
	            + "and I'm the destroy() method");
	    }

}

Class 2: Main method Class

import org.springframework.context.ConfigurableApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

public class Client {

	public static void main(String[] args) throws Exception {

		// Loading the Spring XML configuration
		// file into the spring container and
		// it will create the instance of
		// the bean as it loads into container

		ConfigurableApplicationContext cap = new ClassPathXmlApplicationContext("spring.xml");

		// It will close the spring container
		// and as a result invokes the
		// destroy() method
		cap.close();
	}
}

XML file :

<beans xmlns="http://www.springframework.org/schema/beans"
 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
 xsi:schemaLocation="http://www.springframework.org/schema/beans
 http://www.springframework.org/schema/beans/spring-beans.xsd">
 
 
 
 <bean id="HelloBean"  class="springcore_example.HelloBean">
 
  <property name ="name" value="sarika">
  </property>
 </bean>

 </beans>


OUTPUT:
Bean HelloWorld has been instantiated and I'm the init() method
Container has been closed and I'm the destroy() method


10. Write a Java program to demonstrate ApplicationContextAware interface .

ANS:
 Class 1:
package AplicationContextAware;

public class Employee {
	private String Name;

	public String getName() {
		return Name;
	}

	public void setName(String name) {
		Name = name;
	}

	@Override
	public String toString() {
		return "employee [Name=" + Name + "]";
	}
	

}

Class 2:  here ApplicationContextAware interface is used
package AplicationContextAware;

import org.springframework.beans.BeansException;
import org.springframework.context.ApplicationContext;
import org.springframework.context.ApplicationContextAware;

public class AppContextAwareImpl implements ApplicationContextAware {
	private ApplicationContext applicationContext;

	public void setApplicationContext(ApplicationContext applicationContext) throws BeansException {
		// TODO Auto-generated method stub
		System.out.println("set Application Context method is called by the spring container");
		this.applicationContext = applicationContext;
	}

	public void displayEmployeeDetails() {
		Employee employee = applicationContext.getBean("employee", Employee.class);
		System.out.println("Got employee object from the applicationContext(Spring Container)=" + employee);

	System.out.println("is employee object Singleton =" + applicationContext.isSingleton("employee"));
	}
}


Class3:
package AplicationContextAware;

import org.springframework.context.support.ClassPathXmlApplicationContext;

public class App {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		ClassPathXmlApplicationContext applicationContext= new ClassPathXmlApplicationContext("applicationContext.xml");
		AppContextAwareImpl applicationContextAwareImpl= applicationContext.getBean("applicationContextAware",AppContextAwareImpl.class);
         applicationContextAwareImpl.displayEmployeeDetails();
         applicationContext.close();
	}

}


XML file:  

<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
 xsi:schemaLocation="http://www.springframework.org/schema/beans
 http://www.springframework.org/schema/beans/spring-beans.xsd">
 


    <bean id="employee" class="AplicationContextAware.Employee">
           <property name="name" value ="peter" />
           </bean>
     <bean id="applicationContextAware"  class="AplicationContextAware.AppContextAwareImpl"></bean>
</beans>



OUTPUT: 
set Application Context method is called by the spring container
Got employee object from the applicationContext(Spring Container)=employee [Name=peter]
is employee object Singleton =true


